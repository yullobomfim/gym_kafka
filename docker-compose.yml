version: "3"

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:6.1.1
    ports:
      - "2181:2181"
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  # reachable on 9092 from the host and on 29092 from inside docker compose
  kafka:
    image: confluentinc/cp-kafka:6.1.1
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
    expose:
      - '29092'
    environment:
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '1'
      KAFKA_MIN_INSYNC_REPLICAS: '1'
  init-kafka:
    image: confluentinc/cp-kafka:6.1.1
    container_name: init-kafka
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:29092 --list

      echo -e 'Creating kafka topics'
      
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic workout --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic code --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic email --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "
      
  sign:
    build: .
    container_name: sign
    hostname: sign
    restart: always
    depends_on:
      - kafka
      - init-kafka
    ports:
      - 3001:9999
    volumes:
      - "./services/sign:/services"
    command: >
      bash -c "npm install  && npm run start"
  code:
    build: .
    container_name: code
    hostname: code
    restart: always
    depends_on:
      - kafka
      - init-kafka
    volumes:
      - "./services/code:/services"
    command: >
      bash -c "npm install && npm run start"
  workout:
    build: .
    hostname: workout
    container_name: workout
    restart: always
    depends_on:
      - kafka
      - init-kafka
    volumes:
      - "./services/workout:/services"
    command: >
      bash -c "npm install  && npm run start"
  email:
    build: .
    hostname: email
    container_name: email
    restart: always
    depends_on:
      - kafka
      - init-kafka
    volumes:
      - "./services/email:/services"
    command: >
      bash -c "npm install  && npm run start"
